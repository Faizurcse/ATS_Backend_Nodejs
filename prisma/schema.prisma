generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ats_User {
  id       Int         @id @default(autoincrement())
  name     String
  email    String      @unique
  number   String
  userType UserType    @default(USER)
  logins   Ats_Login[]
}

model Ats_Login {
  id       Int      @id @default(autoincrement())
  userId   Int
  loggedAt DateTime @default(now())
  user     Ats_User @relation(fields: [userId], references: [id])
}

model Customer {
  id            Int              @id @default(autoincrement())
  companyName   String
  industry      String
  companySize   String?
  website       String?
  description   String?
  email         String?
  status        CustomerStatus   @default(ACTIVE)
  priority      CustomerPriority @default(MEDIUM)
  country       String
  city          String
  address       String?
  annualRevenue String?
  contractValue Decimal?         @db.Decimal(10, 2)
  billingCycle  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  jobs          Ats_JobPost[]
}

model Ats_JobPost {
  id              Int                    @id @default(autoincrement())
  title           String
  company         String
  department      String?
  internalSPOC    String
  recruiter       String?
  email           String
  jobType         String
  experienceLevel String?
  country         String
  city            String
  fullLocation    String
  workType        WorkType               @default(ONSITE)
  jobStatus       JobStatus              @default(ACTIVE)
  salaryMin       Int
  salaryMax       Int
  priority        String?
  description     String
  requirements    String
  requiredSkills  String
  benefits        String
  createdAt       DateTime               @default(now())
  customerId      Int?
  customer        Customer?              @relation(fields: [customerId], references: [id])
  applications    CandidateApplication[]
  timesheetEntries TimesheetEntry[]
}

model CandidateApplication {
  id                 Int                 @id @default(autoincrement())
  jobId              Int
  firstName          String
  lastName           String
  email              String
  phone              String
  currentLocation    String?
  resumeFilePath     String?
  coverLetter        String?
  keySkills          String?
  salaryExpectation  Int?
  noticePeriod       String?
  yearsOfExperience  String?
  remoteWork         Boolean?
  startDate          String?
  portfolioUrl       String?
  status             String              @default("pending")
  appliedAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  jobDeleted         Boolean             @default(false)
  job                Ats_JobPost         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  interviewSchedules InterviewSchedule[]
}

model InterviewSchedule {
  id            Int                  @id @default(autoincrement())
  candidateId   Int
  candidateName String
  interviewDate DateTime
  interviewTime String
  interviewType String
  interviewMode String
  platform      String?
  meetingLink   String?
  interviewer   String?
  notes         String?
  status        String               @default("SCHEDULED")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  candidate     CandidateApplication @relation(fields: [candidateId], references: [id])
}

model TimesheetEntry {
  id             Int             @id @default(autoincrement())
  recruiterId    String?
  date           String
  hours          Decimal         @db.Decimal(4, 2)
  entityType     EntityType
  entityId       String?
  jobId          Int?            // Foreign key to job when entityType is JOB
  taskType       String
  comments       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  approvedAt     DateTime?
  approvedBy     String?
  attachments    String?
  billable       Boolean         @default(true)
  billableRate   Decimal?        @db.Decimal(8, 2)
  breakTime      Decimal?        @db.Decimal(3, 2)
  companyName    String?
  endTime        String?
  entityName     String?
  priority       Priority        @default(MEDIUM)
  recruiterEmail String?
  recruiterName  String
  startTime      String?
  status         TimesheetStatus @default(PENDING)
  taskCategory   TaskCategory    @default(RECRUITMENT)
  
  // Relations
  job            Ats_JobPost?    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

enum UserType {
  ADMIN
  MANAGER
  USER
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  SUSPENDED
}

enum CustomerPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum WorkType {
  ONSITE
  REMOTE
  HYBRID
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
  FILLED
}

enum EntityType {
  CUSTOMER
  JOB
  CANDIDATE
}

enum TaskCategory {
  RECRUITMENT
  CLIENT_MANAGEMENT
  ADMINISTRATIVE
  TRAINING
  MEETING
  RESEARCH
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TimesheetStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  SUBMITTED
}
